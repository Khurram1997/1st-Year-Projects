#pragma config(Sensor, S1,     lightSensor,    sensorEV3_Color)
#pragma config(Motor,  motorB,          left,          tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          right,         tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

const tSensors lightSensor = (tSensors) S1;

#define ROW 7
#define COL 9

int grid[ROW][COL];

//prototype
int find_threshold();
void go_through(int threshold);
void turnLeft();
void turnRight();
void forward();
void go_back();
void write_file();

task main()
{
	int threshold;
	int i=0,j=0;

	//fill the array grid with 0
	for(i = 0; i < COL; i++)
    {
    		for(j = 0; j < ROW; j++)
    		{
    				grid[j][i] = 0;
    		}
    }

  //call a return function that find out the light value depending on the surrounding

  threshold = find_threshold();

  //call a function that goes through the grid
  go_through(threshold);


  //go back()
  go_back();

  //turn left
  turnRight();

  do
  {
  	if (i%2 == 0)
  	{
  		while (j<COL)
  		{
  			forward();
  			j++;
  		}
  		turnRight();
  		forward();
  		turnRight();
  	}
  	else
  	{
  		while(j<COL)
  		{
  			forward();
  			j++;
  		}
  		turnLeft();
  		forward();
  		turnLeft();
  	}
  	i++;
  }while (i<ROW);//end

	//function to write files
  write_file();

}//end main

//function to find the threshold
int find_threshold()
{
			int max;
			int min;
			int threshold;



			while(SensorValue(S1) == 0)
	    {
					max = getColorReflected(S1);
			}

			if(SensorValue(S1) == 1)
			{
					wait1Msec(200);
			}

			while(SensorValue(S1) == 0)
			{
					min = getColorReflected(S1);
			}

			threshold = max + min;
			threshold = threshold/2;

		displayBigStringAt(15,15,"%d",threshold);
		wait1Msec(3000);
		return(threshold);

}//end findThreshold();

//function that make the robot to go through the grid
void go_through(int threshold)
{
	int last_seen=0;
	int  lines=0;


	clearTimer(T1);

	while(lines<2)
	{
		if(time1[T1]>300)
		{
			clearTimer(T1);
			lines=0;
		}

		//Line count
		if (SensorValue(lightSensor) < threshold)
 	  {
 		   motor[left]=30;
 			 motor[right]=30;

 			 if (last_seen == 0)
 			 {
 			  	lines++;
 				  last_seen = 1;
 			 }
 		}
 		else
 		{
 			last_seen = 0;
 		}
 	}

}//end go_through();


	//Implementing function turnleft
void turnLeft()//Turns left 90 degrees
{
	setMotorSyncTime(left,right,-100,705,25);
	sleep(705);

}//end


//Implementing function turnRight
void turnRight()//Turns right 90 degrees
{
	setMotorSyncTime(left,right,100,705,25);
	sleep(740);

}//end

//function for the robot to go forward

void forward()//Implementing function forward
{
		setMotorSyncEncoder(left, right, 0, 740, 40);
		sleep(740);

 }//end forward()


   //function to go back
   void go_back()
   {

     	setMotorSync(motorB,motorC,0,-50);
			wait1Msec(550);


		}//end go_back()

//function to write a file
void write_file()
{
		int j, i;
		j = i = 0;

		string filename = "myproject";

		int  fileHandle;

		fileHandle = fileOpenWrite(filename);

		for(i = 0; i < ROW; i++)
		{
				for(j = 0; j < COL; j++)
				{
						int fileWriteInt = grid[i][j];
				}
		}

		fileClose(fileHandle);

}//end write_file()
